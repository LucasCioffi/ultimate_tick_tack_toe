require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.
RSpec.describe Api::V1::GamesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Game. As you add validations to Game, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      board: [
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
        ['','','','','','','','',''],
      ],
      winner: '',
      turn: 'X',
      valid_subgames: [0,1,2,3,4,5,6,7,8]
    }
  end

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GamesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Game" do
        expect {
          post :create, session: valid_session
        }.to change(Game, :count).by(1)
      end

      it "renders a JSON response with the new game" do

        post :create, params: {game: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      game = Game.create! valid_attributes
      get :show, params: {id: game.id}, session: valid_session
      expect(response).to be_successful
    end

    it "returns a failure response if there is no game with that ID" do
      get :show, params: {id: 10}, session: valid_session
      expect(response).to_not be_successful
    end
  end

  describe "GET #move" do
    it "returns a success response" do
      skip
      game = Game.create
      params = { id: game.id, subgame: 3, cell: 8 }
      post '/api/v1/move', params
      expect(response).to be_successful
    end

    it "returns a failure response if the cell is occupied" do
      skip
    end

    it "returns a failure response if it's an invalid move" do
      skip
    end

    it "returns a failure response if the game is over" do
      skip
    end

    it "returns a failure response if the parameters are invalid" do
      skip
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }
  #
  #     it "updates the requested game" do
  #       game = Game.create! valid_attributes
  #       put :update, params: {id: game.to_param, game: new_attributes}, session: valid_session
  #       game.reload
  #       skip("Add assertions for updated state")
  #     end
  #
  #     it "renders a JSON response with the game" do
  #       game = Game.create! valid_attributes
  #
  #       put :update, params: {id: game.to_param, game: valid_attributes}, session: valid_session
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  #
  #   context "with invalid params" do
  #     it "renders a JSON response with errors for the game" do
  #       game = Game.create! valid_attributes
  #
  #       put :update, params: {id: game.to_param, game: invalid_attributes}, session: valid_session
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq('application/json')
  #     end
  #   end
  # end
end
